Architecture:

Malgré le fait que le nombre de fonctionnalité est relativement faible, j'ai préféré diviser mon système en un Service, qui utilise un Repository, qui utilise un Parser. J'ai fait ainsi car je voulais limité à leurs propres taches chacune des classes(ou module). Ainsi, data_parser va chercher les informations dans le fichier tsv. L'avantage pour le Repository d'utiliser le data_parser et que on peu brancher un autre parser sur d'autre donnée et le fonctionnement reste le même (à condition que le parser respecte les même paramêtres). On pourrais également se brancher sur une bd éventuellement. Le Service permet de garder "propre" le end point de la classe Apps. Finalement, le service expose seulement les taches qu'il offres. Je crois que le calcul de l'algorithme pourrais être isoler du service pour respecté les bonnes "pratique", mais je trouvais que sa commencais à faire beaucoup de class/modules avec peu de stock.

Algo:

En gros, l'algorithme donne un poid à different paramêtre selon la situation. Les paramêtres sont la relevency, la distance et la population.

Relevency: Le nombre de lettre du keyword sur le nombre total de lettre du nom de la suggestion

Distance: L'index de la suggestion(dans une liste des suggestions trier selon leur distance) sur le nombre total de suggestion. Donc la ville la plus pres donne 1 et la ville la plus loin 1/n.

Population: Même principe que pour distance mais avec une liste de population. Les plus grosse sont donc avantagé car, par probabilité, plus de chance d'être cherché.

L'algorithme peux être ajuster en fonction de se sur quoi on désire mettre de l'important. Dans mon cas, j'accorde moin d'importance a la distance et plus à la relevency et population. Comme c'est un autocomplete, je voulais que sa me suggére des villes près de ce que j'écrit.

Ajout du paramêtre 'limit':

J'ai décider d'ajouter la fonctionnalité qui permet de limiter le nombre de choix retourner. Ainsi si "/suggestions?q=to?limit=10" est appellé, nous n'aurons que les 10 meilleurs suggestions (ou moin si nombre de suggestions inferieur à la limite).


